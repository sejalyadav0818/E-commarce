<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin-Panel</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
        body {
    margin: 0;
    font-family: var(--bs-body-font-family);
    font-size: var(--bs-body-font-size);
    font-weight: var(--bs-body-font-weight);
    line-height: var(--bs-body-line-height);
    color: var(--bs-body-color);
    text-align: var(--bs-body-text-align);
    background-color: var(--bs-body-bg);
    -webkit-text-size-adjust: 100%;
    -webkit-tap-highlight-color: transparent;
}
       
    </style>
    <script>
        $(document).ready(function () {
            $('#myTable').DataTable();
        });

        async function confirmation(id) {
            if (confirm("Are you sure you want to delete this data..?")) {
                //console.log(`${id}`);
                const res = await axios.delete(`/user/delete/${id}`).then(function (response) {
                    return "data deleted"
                });

                //console.log("hello9");
                window.location.reload();
            } else {
                alert("not deleted");
            }
        }

        async function addUser() {
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            if (!name || !email || !password) {
                alert("Please enter all fields");
                return;
            }

            try {
                const res = await axios.post('/user/insert', {
                    name: name,
                    email: email,
                    password: password
                });

                Toastify({
                    text: 'User added successfully',
                    duration: 4000,
                    gravity: 'top',
                    position: 'right',
                }).showToast();

                // Clear input fields
                document.getElementById('name').value = '';
                document.getElementById('email').value = '';
                document.getElementById('password').value = '';

                // Append the new user row to the table
                const table = document.getElementById('myTable').getElementsByTagName('tbody')[0];
                const newRow = table.insertRow();
                newRow.id = `userRow${res.data.id}`;
                newRow.innerHTML = `
          <td>${res.data.id}</td>
          <td>${res.data.name}</td>
          <td>${res.data.email}</td>
          <td>
            <button class="btn btn-danger" onclick="confirmation(${res.data.id})">Delete</button>
          </td>
        `;

                window.location.reload(); // Reload the page
            } catch (error) {
                console.error(error);

                Toastify({
                    text: 'Failed to add user',
                    duration: 4000,
                    gravity: 'top',
                    position: 'right',
                    backgroundColor: '#ff0000',
                }).showToast();
            }
        }

        // Update the user information in the table
        function updateUserRow(updatedUser) {
            const row = document.getElementById(`userRow${updatedUser.id}`);
            if (row) {
                row.cells[1].textContent = updatedUser.name;
                row.cells[2].textContent = updatedUser.email;
                row.cells[3].textContent = updatedUser.isadmin === 1 ? "Admin" : "User";
            }
        }

        // Function to handle the form submission and update the user
        async function editUser(id) {
            const name = document.getElementById(`edit-name-${id}`).value;
            const email = document.getElementById(`edit-email-${id}`).value;
            const isAdmin = document.getElementById(`edit-isadmin-${id}`).value;

            if (!name || !email || !isAdmin) {
                alert("Please enter all fields");
                return;
            }

            try {
                const res = await axios.post(`/user/edit/${id}`, {
                    name: name,
                    email: email,
                    isadmin: isAdmin,
                });

                Toastify({
                    text: 'User updated successfully',
                    duration: 4000,
                    gravity: 'top',
                    position: 'right',
                }).showToast();

                // Update the user row in the table with the updated information
                updateUserRow(res.data);

                // Close the modal
                $(`#editModal${id}`).modal('hide');
            } catch (error) {
                console.error(error);

                Toastify({
                    text: 'Failed to update user',
                    duration: 4000,
                    gravity: 'top',
                    position: 'right',
                    backgroundColor: '#ff0000',
                }).showToast();
            }
        }
    </script>
</head>

<body>
    <%- include('darshboard') %>

<div class="row mt-4">
    <div class="col-md-12">
        <table id="myTable" class="display">
            <thead>
                <tr>
                    <th>Role-name</th>
                    <th>Permissions</th>
                    <th>Action</th>
                </tr>
            </thead>
            <!-- for add roles <button id="addProducts" onclick="addProductPage()">Add Roles</button> -->
<tbody id="tbody">
    <% for(var i=0;i<roles.length;i++) {%>

        <tr>
            <td id="main_role_name">

                <%= roles[i].name %>

            </td>
            <td id="partitioned" type="text" maxlength="4" >

                <% for(j=0; j<roles[i].permissions.length;j ++){ %>
                    <% console.log(permissions[j].name )%>
                                <ul>
                                    <li>
                                <%=roles[i].permissions[j].name%>
                                    </li>
                                </ul>
                        
                            <% }%>

            </td>

            <td><button id="updateBtn" onclick="editProduct(`<%= roles[i].id %>`)">Edit</button>
        </tr>
        <% } %>
</tbody>
</table>
                                    <!-- <th scope="col" id="product_name" onclick="sorting(this.id)">Role Name</th> -->
                    <div class="model-container-products" id="updateuser" style="visibility: hidden;">
                        <div class="col-md-12">
                            <div class="model">
                                <div
                                    onclick="document.querySelector('.model-container-products').style.visibility = 'hidden'">
                                    <i class="fa fa-window-close" aria-hidden="true"></i>
                                </div>

                                <form id="addProductForm" enctype="multipart/form-data" action="/data" method="get">

                                    <fieldset>

                                        <label for="name">role Name</label>
                                        <input type="text" id="role_name" name="name">

                                        <input type="submit" name="submit" value="Add">


                                </form>
                            </div>
                        </div>
                    </div>



                    <div class="model-container" id="updateuser" style="visibility: hidden;">
                        <div class="col-md-12">
                            <div class="model">
                                <div onclick="document.querySelector('.model-container').style.visibility = 'hidden'">
                                    <i class="fa fa-window-close" aria-hidden="true"></i>
                                </div>

                                <form id="updateForm" enctype="multipart/form-data">

                                    <fieldset>

                                        <label for="name">Role Name</label>
                                        <input type="text" id="urole_name" name="name">


                                        <div class="permissions" id="permissions_data">

                                            <% for(j=0; j <permissions.length; j++){ %>

                                                <%= permissions[j].name%><input type="checkbox" class="permissions"
                                                        id="permission_name" ,name="id" value="<%= permissions[j].id%>">

                                                    <% } %>

                                        </div>

                                        <input type="submit" name="submit" value="Add">


                                </form>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
            </div>

        </main>


</body>
<script>

    let p = 1;

    window.onload = () => {
        //     getProducts()
        getCategories()
    }


    async function getCategories() {

        const categoriesData = await axios.get('/roles/permissions');


        for (let catagory of categoriesData.data) {

            let option = document.createElement("option");
            option.setAttribute('value', catagory.id);

            let optionText = document.createTextNode(catagory.name);
            option.appendChild(optionText);
            catDropDown.appendChild(option);

        }
    }
    const add = document.querySelector('#addProducts');
    add.addEventListener('click', () => {
        document.querySelector('.model-container-products').style.visibility = 'visible';
    })

    const form = document.querySelector('#addProductForm');
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        let name = document.getElementById("product_name").value;
        let catagory = document.getElementById("categoriesDropDown").value;
        let categoryIds = catagory;
        let formData = new FormData(form);

        let res = await axios.post('/roles/permissions/', formData)
        document.querySelector('.model-container-products').style.visibility = 'hidden';

        document.getElementById("name").value = '';

        getProducts();
    })

    async function editProduct(id) {
        const res = await axios.get(`/roles/${id}`);
        const permissions = await axios.get('/roles/permissions');
        const user = res.data;
        console.log(user)
        document.getElementById('urole_name').value = user.name;

        var div = document.querySelector('#permissions_data');
console.log(div);
        document.querySelector('.model-container').style.visibility = 'visible';
        const form = document.querySelector('#updateForm');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            let arr = [];
            let checkboxes = document.querySelectorAll("input[type='checkbox']:checked");
            for (let i = 0; i < checkboxes.length; i++) {
                arr.push(checkboxes[i].value)
            }

            console.log(checkboxes);
            const obj = Object.fromEntries(Object.entries(arr));
            console.log("coooooooooooooooooo");
            console.log(checkboxes,obj);
            document.getElementById('permission_name').value



            const idd = parseInt(id);


            const res = await axios.put(`/roles/${id}`,
                {
                    permissionIds: arr


                }
            );
            console.log(res)
            document.querySelector('.model-container').style.visibility = 'hidden';
        })
    }


</script>

</html>